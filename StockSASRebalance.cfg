//--------------------------------------------------------------------------------------------------------------\\
// Kerbal Space and Atmoshperic Exploration Agency Stock SAS Rebalance						\\
//														\\
// This config rebalances all stock SAS parts and the SAS of all stock command parts.				\\
//--------------------------------------------------------------------------------------------------------------\\

//Rebalances SAS for the Advanced S.A.S Module, Large
@PART[asasmodule1-2]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$
		//Further reduces the torque value
		@sasTorque *= 0.3

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Small Inline Reaction Wheel
@PART[sasModule]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$
		//Further reduces the torque value
		@sasTorque *= 0.8

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Advanced Inline Stabilizer
@PART[advSasModule]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$
		//Further reduces the torque value
		@sasTorque *= 0.5

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Removes SAS from the Mk1 Cockpit
@PART[Mark1Cockpit]:FOR[KSAEA]
{
	!MODULE[ModuleSAS] {}
	!MODULE[ModuleReactionWheel] {}
}

//Removes SAS from the Mk1 Inline Cockpit
@PART[Mark2Cockpit]:FOR[KSAEA]
{
	!MODULE[ModuleSAS] {}
	!MODULE[ModuleReactionWheel] {}
}

//Removes SAS from the PPD-12 Cupola Module
@PART[cupola]:FOR[KSAEA]
{
	!MODULE[ModuleSAS] {}
	!MODULE[ModuleReactionWheel] {}
}

//Rebalances SAS for the Command Pod Mk1
@PART[mk1pod]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$
		//Further reduces the torque value
		@sasTorque *= 0.7

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Mk1 Lander Can
@PART[landerCabinSmall]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Mk1-2 Command Pod
@PART[Mark1-2Pod]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$
		//Further reduces the torque value
		@sasTorque *= 0.5

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Mk2 Lander-can
@PART[mk2LanderCabin]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$
		//Further reduces the torque value
		@sasTorque *= 0.45

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Mk3 Cockpit
@PART[mark3Cockpit]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$
		//Further reduces the torque value
		@sasTorque *= 0.8

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Mk2 Inline Cockpit
@PART[mk2Cockpit_Inline]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$
		//Further reduces the torque value
		@sasTorque *= 0.45

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Mk2 Cockpit
@PART[mk2Cockpit_Standard]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$
		//Further reduces the torque value
		@sasTorque *= 0.45

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Stayputnik Mk. 1
@PART[probeCoreSphere]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Probodobodyne QBE
@PART[probeCoreCube]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Probodobodyne OKTO
@PART[probeCoreOcto]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied
		//Value for PitchTorque from the Probodobodyne HECS is used to make these two probes equal
		sasTorque = #$@PART[probeCoreHex]/MODULE[ModuleReactionWheel]/PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Probodobodyne OKTO2
@PART[probeCoreOcto2]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the Probodobodyne HECS
@PART[probeCoreHex]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the RC-L01 Remote Guidance Unit
@PART[probeStackLarge]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the RC-001 Remote Guidance Unit
@PART[probeStackSmall]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}

//Rebalances SAS for the MK2 Drone Core
@PART[mk2DroneCore]:FOR[KSAEA]
{
	@MODULE[ModuleReactionWheel]
	{
		//Makes PitchTorque = Roll and Yaw
		@PitchTorque = #$YawTorque$

		//Creates a variable for storing and applying the new SAS value to be applied with the current
		//SAS value from PitchTorque
		sasTorque = #$PitchTorque$

		//Applies the global multiplier for SAS to sasTorque
		@sasTorque *= #$@KSAEAVARS/globalSASTorqueX$

		//Applies the new torque value for SAS to the part
		@PitchTorque = #$sasTorque$
		@YawTorque = #$sasTorque$
		@RollTorque = #$sasTorque$

		//cleans up variables used by the patch
		!sasTorqueX = null
	}
}
